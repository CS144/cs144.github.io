cs144 lecture Sep 22, 2021
- Whirlwind tour of how the internet works
- The ABSTRACTION of reliability
- Internet provides one abstraction: DATAGRAMS

- What is in a datagram?
	- To address of a computer (laptop, server, phone, etc) on the internet (fully specified)
		- Ipv4: addresses 32 bits (mostly in use)
		- Ipv6: addresses 128 bits
	- From address (fully specified)
	- Some text (short piece of text, approx < 1.5 Kilobyte (= 1500 bytes = 12000 bits)
		- Keith will defer question of why 1.5 Kilobytes

- Internet tries to provide 'best effort delivery'
- Internet allows information to be sent between different computers
- On Internet every address is given a numeric address

- What could happen to the datagram?
	- Option 1: delivered quickly (what we hope for)
	- Option 2: delivered, but with different text (corrupted)
	- Option 3: Delivered late (could be after other datagrams, in the wrong order)
	- Option 4: Delivered to the wrong address (or from address)
	- Option 5: NOT delivered
	- Option 6: Delivered, tampered text
	- Option 7: Delivered multiple times

- All of the hardware on the internet (routers, ethernet, etc) can provide this abstraction: because the datagram abstraction is unreliable
	- Would have later been harder to build Wifi, if datagram abstraction were reliable


- How do packets find their way across the internet?
	- Because in ipv4 the addresses are 32 bits, we have 2^32 unique addresses (~4 billions)
		- There are way more than 4 billion addresses in the world (cellphone, chromecast, Apple Watch...)
		- But this distinction won't matter in this class
	- Example: take IP address 104.196.238.229: it corresponds to a unique 32 bit number
		- How do we calculate the the 32 bit number from this human readable IP address:
		- Answer: 229 + 238 * 256 + 196 * 256^2 + 104 * 256 ^ 3
	- Addresses have a hierarchical structure: not random
	- Important: address on computer doesn't come from manufacturer, comes from network:
		- Keith's address on his laptop comes from Stanford NOT Lenovo
		- So then the addresses can respect the hierarchy
		- E.g., all addresses from 104.196.0.0 - 104.199.255.255 is in google
		- How do you get ownership of an address?
			- Easiest way: get from owner network
			- E.g., Keith has an address from Stanford, Stanford gets it from someone
			- Look at this fun XKCD map which shows an (older) picture of which
              IPs belong to which organizations: https://xkcd.com/195/
		- At Stanford, address is different from when you are at home
		- Each time you wake up computer in new building, you get a new address (computer asks Stanford)
		- Only need to have addresses for computers that are on


- Not part of the abstraction: Having datagrams that live forever!!!:
    - How do we stop datagrams from living together?
	- To protect against this:
		- TTL: time to live: the number of steps it's allowed to take until it expires
		- Why?
		- Protect against: datagram lives forever in the network: gets caught in a loop
		- If TTL is 32, after 32 steps of trying to find destination (32 "hops") -- the datagram doesn't get sent anymore
	- Cool feature: the router who dropped message will send a message back to the sender that it was dropped
		- Using this feature, can we see the path our packet takes? How can we use this feature to figure out the packet path?
		- If I want to know who is 1 hop away: set TTL as 1:
			- Then look at error message to see who sent error
		- Then look at who is 2 hops away: set TTL as 2:
			- Then look at error message to see who sent error
		- This is what TRACEROUTE does!!
		- Try on cardinal: `traceroute address`:
			- Traceroute will list hops along the way
			 

			
- One of the core services you can build on top of the datagram is the abstraction of the reliable byte stream
	- Byte stream: sequence of bytes:
	- Abstraction:
		- Write "..."
		- Pop/read "..."
	- If you have write "a" "b" "c"
		- pop 3
		- reader gets "abc"
	- If you have writer write "abc"
		- pop 3
		- reader still gets "abc": hides the fact that they were written together ('abc') vs. separately ('a', 'b', 'c')

	- Internet: can build abstractions over other abstractions: look at tower of abstractions
		- This is called a "network stack"
		- Each module provides just about the abstraction it provides and abstraction it needs
		- So you can individually build layers without worrying about other layers
		- Internet was able to evolve because you can individually innovate
		- This four layer model is called "Internet 4-layer model"
		- Please forgive my failed ASCII Art
			
			 (request / response)
			--------------------------
			|HTTP (application layer)|
			--------------------------
				(Byte Stream)
			      -------------------
		        	|                 |
			      | TLS encryption  |			 
			      |                 |
			      -------------------				
				
				(Secure Bytes stream)

			----------------------------------
			|     TCP                         |
			|   Transmission control protocol |
			|	(transport layer)		   |	 
			|                                 |
			------------------------------------
			
					(Datagram)
			      --------------------
		            	|Network Interface|
		        	-------------------
			      (Wave Packet / Stream)


- Q: How is it possible to hide address?
	- People use Web / HTTP Proxies:
		- Where, in the HTTP layer, you could proxy to another HTTP layer
	- Virtual private network:
		- At the datagram layer: make a request -- it becomes a datagram
		- Instead of directly sending datagram, take datagram and put it inside another datagra
	- Tor: go take cs155
	
- Q: If multiple lines of communication go to one specific address, how does this address share specific interface across different lines of communication:
	- MULTIPLEXING: take one interface and make It look like many different interfaces
		- Put a byte at each layer -- in the datagram -- to represent the next layer
	- VIRTUALIZATION: similar: different VMs on same computer
	- E.g.: TCP serves different programs (Firefox, Chrome, Outlook, Safari)
	- Each one of these programs has several byte streams
	- whEN a message is received, has to know which program it's for 
	- Datagram layer doesn't just talk to TCP
		- There's also error messages (should it go to TCP or error message people)
			
- Q: If multiple domains share IP, how do you know what to go to?









